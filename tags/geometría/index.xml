<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>omegaUp blog – Geometría</title><link>https://blog.omegaup.com/tags/geometr%C3%ADa/</link><description>Recent content in Geometría on omegaUp blog</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Thu, 12 Nov 2015 17:06:59 +0000</lastBuildDate><atom:link href="https://blog.omegaup.com/tags/geometr%C3%ADa/index.xml" rel="self" type="application/rss+xml"/><item><title>Invasion Zombie</title><link>https://blog.omegaup.com/solution/invasion-zombie/</link><pubDate>Thu, 12 Nov 2015 17:06:59 +0000</pubDate><guid>https://blog.omegaup.com/solution/invasion-zombie/</guid><description>
&lt;p>Hola!, este es mi primer post en Omegaup y voy a describir mi solución para el problema &lt;a href="https://omegaup.com/arena/IOI2014E1P3/practice/#problems/invasionzombie" target="_blank" rel="noopener">Invasion zombie&lt;/a>. Hace un año encontré este problema, me pareció interesante y logre resolverlo, aunque algo tricky. Hace unos días me tope con este problema nuevamente y lo resolví por segunda ocasión, pero con una solución más simple, al menos eso creo.&lt;/p>
&lt;h2>Primer solución&lt;span class="hx-absolute -hx-mt-20" id="primer-solución">&lt;/span>
&lt;a href="#primer-soluci%c3%b3n" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>La idea principal tanto en la primera como en la segunda solución es diseñar una función $latex f(d)$ que nos retorne el número de colonias infectadas después de $latex d$ días, nos interesa el mínimo valor de $latex d$ tal que el número de colonias infectadas sea mayor o igual a $latex C$. Una propiedad importante es la siguiente, $latex f(d)$ nunca decrece, es decir $latex f(d) &amp;lt;= f(d+1)$. Esta propiedad nos permite utilizar búsqueda binaria para encontrar las respuesta en $latex O(\lg_{2}(n))$. Diseñar una función que determine el número de colonias infectadas, dependiendo del background de cada uno, es la parte interesante, y es donde difieren las dos versiones, bueno, un poco. Este es el código de la primer versión, no voy a entrar en detalles porque ni yo me acuerdo bien que trucos aplique, pero la idea es parecida a la de la de la segunda versión, lo que cambia es la estrategia.&lt;/p>
&lt;script src="https://gist.github.com/rendon/4298449a291244690253.js">&lt;/script>
&lt;h2>Segunda versión&lt;span class="hx-absolute -hx-mt-20" id="segunda-versión">&lt;/span>
&lt;a href="#segunda-versi%c3%b3n" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Bueno, empecemos, trascurridos $latex d$ días, ¿cuántas colonias han sido infectadas? Simulemos la invasión y veamos si podemos encontrar un patrón. &lt;a href="https://blog.omegaup.com/images/zombies-pattern.png" >&lt;img src="https://blog.omegaup.com/images/zombies-pattern.png" alt="zombies-pattern" loading="lazy" />&lt;/a> No es complicado llegar a la siguiente fórmula: $latex f(d) = d^{2} + (d+1)^{2}$ Si el espacio de la ciudad fuese ilimitado nuestra función de verificación sería algo parecido a:&lt;/p>
&lt;script src="https://gist.github.com/rendon/1308e65b73b82d452bba.js">&lt;/script>
&lt;p>Sin embargo, el espacio de la ciudad es limitado y habrá casos como los siguientes: &lt;a href="https://blog.omegaup.com/images/zombies-sc1.png" >&lt;img src="https://blog.omegaup.com/images/zombies-sc1.png" alt="zombies-sc1" loading="lazy" />&lt;/a> &lt;a href="https://blog.omegaup.com/images/zombies-sc2.png" >&lt;img src="https://blog.omegaup.com/images/zombies-sc2.png" alt="zombies-sc2" loading="lazy" />&lt;/a> Entonces nuestro objetivo es encontrar el área delimitada por la ciudad (un cuadrado de N * N unidades), lo cual se pone un poco tricky. La siguiente imagen nos ayudará a entender el código de la solución sin entrar en tantas explicaciones. &lt;a href="https://blog.omegaup.com/images/zombies-solution.png" >&lt;img src="https://blog.omegaup.com/images/zombies-solution.png" alt="zombies-solution" loading="lazy" />&lt;/a> Es decir, el área total menos el área de los triángulos superior, inferior, izquierdo y derecho. Obsérvese que los triángulos pueden traslaparse y por lo tango estaríamos restando esas áreas 2 veces, por ello tenemos que calcular las áreas de traslape (&lt;em>nw&lt;/em>, &lt;em>ne&lt;/em>, &lt;em>se&lt;/em> y &lt;em>sw&lt;/em> en la imagen) y regresar lo a la suma total. Lo que sigue es la implementación:&lt;/p>
&lt;script src="https://gist.github.com/rendon/b65689354d202e562fe7.js">&lt;/script>
&lt;p>Espero que les sea útil, dudas, comentarios o correcciones son bienvenidas.&lt;/p></description></item></channel></rss>