<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Macs on omegaUp blog</title><link>https://blog.omegaup.com/tags/macs/</link><description>Recent content in Macs on omegaUp blog</description><generator>Hugo</generator><language>es-mx</language><lastBuildDate>Thu, 16 Jan 2014 17:36:38 +0000</lastBuildDate><atom:link href="https://blog.omegaup.com/tags/macs/index.xml" rel="self" type="application/rss+xml"/><item><title>Solución a "Panoramas"</title><link>https://blog.omegaup.com/solucion-a-panoramas/</link><pubDate>Thu, 16 Jan 2014 17:36:38 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-panoramas/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2014E1P17#problems/Tour">Preselectivo para la IOI 2014, Etapa 1, Problemset 17&lt;/a> &lt;strong>Autor:&lt;/strong> Miguel Ángel Covarrubias &lt;strong>Fuente&lt;/strong>: Miguel Ángel Covarrubias&lt;/p>
&lt;p>El problema es un Steiner tree problem (un MST pero donde sólo hay que conectar un subconjunto de nodos) pero con costo por nodo en vez de por arista. El grafo de los panoramas es un árbol más un ciclo. Para un árbol una solución es poner como raíz a $latex s_1$ y para cada $latex s_i$ marcar los nodos en su camino hacia la raíz. Se puede usar DP o recursión para calcular el mínimo numero de vertices que conectan todos los nodos interesantes y pasan por la raíz para cada subárbol.&lt;/p></description></item><item><title>Solución a "Pista"</title><link>https://blog.omegaup.com/445/</link><pubDate>Sun, 06 Oct 2013 22:48:35 +0000</pubDate><guid>https://blog.omegaup.com/445/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2014E1P14#problems/pista">Preselectivo para la IOI 2014, Etapa 1, Problemset 14&lt;/a> &lt;strong>Autor:&lt;/strong> Miguel Covarrubias &lt;strong>Fuente&lt;/strong>: Codeforces&lt;/p>
&lt;p>Este problema es una ligera modificación del Let&amp;rsquo;s Play Osu! que apareció en la ronda 146 en Codeforces. &lt;a href="http://codeforces.ru/blog/entry/5592">La solución explicada la pueden encontrar en el editorial.&lt;/a>&lt;/p>
&lt;p>Para $latex N \le 10$ se pueden checar todas las $latex 2^N$ configuraciones de pistas. Para $latex N \le 1000$ funciona una dinámica $latex O(N^2)$, donde los estados son (posición, altura/profundidad que se lleva hasta el momento).&lt;/p></description></item><item><title>Solución a "Ubongo 3D"</title><link>https://blog.omegaup.com/solucion-a-ubongo-3d/</link><pubDate>Sat, 14 Sep 2013 05:04:59 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-ubongo-3d/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/problem/ubongo-3d">Preselectivo para la IOI 2014, Etapa 1, Problemset 8&lt;/a> &lt;strong>Autor:&lt;/strong> Miguel Covarrubias &lt;strong>Fuente:&lt;/strong> Miguel Covarrubias&lt;/p>
&lt;p>La solución pone piezas de manera recursiva mientras quepan en el tablero y no se empalmen.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>resuelve(pieza)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> si pieza &lt;span style="color:#f92672">&amp;gt;&lt;/span> P
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> regresa &lt;span style="color:#960050;background-color:#1e0010">“&lt;/span>Si&lt;span style="color:#960050;background-color:#1e0010">”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> para cada rotación de la pieza
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> para cada casilla g del tablero
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> para cada cubo c de la pieza
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> si al poner c sobre g, la pieza queda dentro de los primeros &lt;span style="color:#ae81ff">2&lt;/span> niveles del tablero y no se empalma con otra pieza ya puesta entonces
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> marca las posiciones de los cubos de la pieza como ocupados
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resuelve(pieza &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> desmarca los cubos de la pieza
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Para rotar una pieza se puede rotar por $latex 0^o$, $latex 90^o$, $latex 180^o$ o $latex 270^o$ alrededor de cada eje. El número de operaciones es aproximadamente (número de rotaciones * número de casillas del tablero * número de cubos de una pieza)$latex ^3 \le (24 * 7 * 5)^3 &amp;lt; 600,000,000$. En los casos de prueba y en el juego todas las soluciones tocan la base del tablero, si no fuera así, solo hay que duplicar el 7 a 14. Para checar si una pieza se puede poner en cierta posición se pueden usar mascaras de bits para los niveles del tablero y para las posiciones ocupadas. Para poner la última pieza se puede comparar todas las rotaciones de los cubos no ocupados contra la última pieza y la complejidad cubica de la solución se reduce a cuadrática.&lt;/p></description></item></channel></rss>