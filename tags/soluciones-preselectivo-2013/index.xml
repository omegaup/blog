<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Soluciones Preselectivo 2013 on omegaUp blog</title><link>https://blog.omegaup.com/tags/soluciones-preselectivo-2013/</link><description>Recent content in Soluciones Preselectivo 2013 on omegaUp blog</description><generator>Hugo</generator><language>es-mx</language><lastBuildDate>Thu, 23 Jan 2014 03:51:39 +0000</lastBuildDate><atom:link href="https://blog.omegaup.com/tags/soluciones-preselectivo-2013/index.xml" rel="self" type="application/rss+xml"/><item><title>Solución a "Químicos"</title><link>https://blog.omegaup.com/solucion-a-quimicos/</link><pubDate>Thu, 23 Jan 2014 03:51:39 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-quimicos/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2014E1P6#problems/quimicos">Preselectivo para la IOI 2014, Etapa 1, Problemset 6&lt;/a> &lt;strong>Autor:&lt;/strong>  &lt;a href="http://lhchavez.com/">Luis Héctor Chávez (lhchavez)&lt;/a> &lt;strong>Fuente&lt;/strong>: Ethan Jiménez Vargas&lt;/p>
&lt;p>Éste es un problema que tiene una solución elegante y determinística pero requiere algoritmos avanzados bastante complicados. Lo bueno es que es posible aproximar a la solución utilizando fuerza bruta mediante backtracking.&lt;/p>
&lt;p>El problema nos pide encontrar una manera de asignar sustancias a los tubos y después mezclarlas con las dos operaciones disponibles (suma y diferencia absoluta) para terminar con un acomodo homogéneo de sustancias: la diferencia entre el tubo con más cantidad y con menos cantidad de sustancia debe ser lo más pequeña posible. Una manera de hacerlo es proponer un intervalo $latex [a,b]$ y ver si es posible asignar sustancias y aparear los tubos de manera que la cantidad de sustancia resultante de la mezcla en todos los tubos esté contenido dentro del intervalo. Para acelerar el proceso, puedes elegir los intervalos haciendo una búsqueda binaria de acuerdo a su ancho $latex b-a$, porque a fin de cuentas lo que nos pide el problema es precisamente el ancho mínimo. Para cada intervalo propuesto $latex [a,b]$, podemos hacer un grafo con $latex 2N$ nodos (uno para cada tubo), agregando un arco entre dos nodos $latex A$ y $latex B$ si $latex A+B\in[a,b]$ ó $latex |A-B|\in[a,b]$. Después, buscamos un &lt;a href="http://es.wikipedia.org/wiki/Apareamiento_(teor%C3%ADa_de_grafos)">apareamiento máximo&lt;/a> en el grafo: buscamos el conjunto de arcos con cardinalidad máxima tal que cada nodo tenga a lo más un arco incidente. Esto se puede encontrar con el &lt;a href="http://es.wikipedia.org/wiki/Algoritmo_de_Emparejamiento_de_Edmonds">algoritmo de Edmonds&lt;/a> (también conocido como el Blossom algorithm por la forma de los ciclos de longitud impar) en tiempo $latex O(|2N|^4)$, lo cual encontraría todas las soluciones en solo un par de segundos.&lt;/p></description></item><item><title>Solución a "Crucero"</title><link>https://blog.omegaup.com/solucion-a-crucero/</link><pubDate>Thu, 23 Jan 2014 03:41:06 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-crucero/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2014E1P4#problems/Crucero">Preselectivo para la IOI 2014, Etapa 1, Problemset 4&lt;/a> &lt;strong>Autor:&lt;/strong> &lt;a href="mailto:saul.g.gutierrez@gmail.com">Saúl Germán Gutiérrez Calderón&lt;/a> &lt;strong>Fuente&lt;/strong>: USACO Enero 2009 Gold&lt;/p>
&lt;p>Como se puede notar, al trazar la ruta óptima del crucero se está desperdiciando mucho espacio, y daría lo mismo si expandiésemos la isla para que no se desperdiciara espacio entre la ruta y la orilla de ésta.&lt;/p>
&lt;p>&lt;a href="https://blog.omegaup.com/images/image002.jpg">&lt;img src="https://blog.omegaup.com/images/image002.jpg" alt="" title="image002">&lt;/a> &lt;a href="https://blog.omegaup.com/images/image004.jpg">&lt;img src="https://blog.omegaup.com/images/image004.jpg" alt="" title="image004">&lt;/a>&lt;/p>
&lt;p>Si supiéramos cual es la ruta óptima del crucero para expandir la isla bastaría con hacer un Flood Fill para rellenar los espacios con agua que quedan dentro de la ruta.&lt;/p></description></item><item><title>Solución a "Mocha Hojas"</title><link>https://blog.omegaup.com/solucion-a-mocha-hojas/</link><pubDate>Sat, 18 Jan 2014 23:25:14 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-mocha-hojas/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2014E1P17#problems/Mocha-Hojas">Preselectivo para la IOI 2014, Etapa 1, Problemset 17&lt;/a> &lt;strong>Autor:&lt;/strong> &lt;a href="http://freddy.mx/">Freddy Román Cepeda&lt;/a> &lt;strong>Fuente&lt;/strong>: Alberto José Ramírez Valadez&lt;/p>
&lt;p>Para simplificar el análisis, podemos notar que la respuesta que nos piden es igual al total de los pesos de las hojas del árbol menos el total de los pesos de las hojas del árbol ya balanceado. De ahora en adelante, trataremos el problema como si tuviéramos que conseguir este segundo valor, en vez del número de operaciones. Entonces queremos maximizar el peso total del árbol balanceado, para minimizar la cantidad de operaciones.&lt;/p></description></item><item><title>Solución alternativa a "Decepción"</title><link>https://blog.omegaup.com/solucion-alternativa-a-decepcion/</link><pubDate>Fri, 17 Jan 2014 02:14:47 +0000</pubDate><guid>https://blog.omegaup.com/solucion-alternativa-a-decepcion/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2014E1P8#problems/decepcion">Preselectivo para la IOI 2014, Etapa 1, Problemset 8&lt;/a> &lt;strong>Autor:&lt;/strong> &lt;a href="http://freddy.mx/">Freddy Román Cepeda&lt;/a> &lt;strong>Fuente&lt;/strong>: Ethan Jiménez Vargas&lt;/p>
&lt;p>Esta es una solución alternativa al problema. La solución pensada originalmente consiste en una búsqueda podada. Sin embargo, esta solución corre en tiempo y memoria $latex O(N^2)$, mucho mejor de lo necesario para obtener todos los puntos.&lt;/p>
&lt;p>Podemos dividir el problema a la mitad con una observación simple: la torre más alta debe verse desde ambos lados. Además, no dejará que el resto de las torres que ocurren después de ella se vean. Podemos aprovechar este hecho para separar el problema en dos partes: izquierda y derecha. Si $latex f(n,m)$ cuenta de cuántas maneras se pueden poner $latex n$ torres de tal manera de que sólo $latex m$ se pueden ver de un lado, la respuesta que queremos es $latex \sum_{i=0}^{N-1} ({N-1 \choose i} * f(i,F-1) * f(N-i-1,B-1))$.&lt;/p></description></item><item><title>Solución a "Panoramas"</title><link>https://blog.omegaup.com/solucion-a-panoramas/</link><pubDate>Thu, 16 Jan 2014 17:36:38 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-panoramas/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2014E1P17#problems/Tour">Preselectivo para la IOI 2014, Etapa 1, Problemset 17&lt;/a> &lt;strong>Autor:&lt;/strong> Miguel Ángel Covarrubias &lt;strong>Fuente&lt;/strong>: Miguel Ángel Covarrubias&lt;/p>
&lt;p>El problema es un Steiner tree problem (un MST pero donde sólo hay que conectar un subconjunto de nodos) pero con costo por nodo en vez de por arista. El grafo de los panoramas es un árbol más un ciclo. Para un árbol una solución es poner como raíz a $latex s_1$ y para cada $latex s_i$ marcar los nodos en su camino hacia la raíz. Se puede usar DP o recursión para calcular el mínimo numero de vertices que conectan todos los nodos interesantes y pasan por la raíz para cada subárbol.&lt;/p></description></item><item><title>Solución a "Mapas de bits"</title><link>https://blog.omegaup.com/solucion-a-mapas-de-bits/</link><pubDate>Sun, 06 Oct 2013 22:56:54 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-mapas-de-bits/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2014E1P12/#problems/Mapas-de-bits">Preselectivo para la IOI 2014, Etapa 1, Problemset 12&lt;/a> &lt;strong>Autor:&lt;/strong> Jorge Alberto González Martínez &lt;strong>Fuente&lt;/strong>: Jorge Alberto González Martínez&lt;/p>
&lt;p>En el problema se describen dos formas de representar un mapa de bits.&lt;/p>
&lt;p>La forma bidimensional es simplemente utilizar una matriz para representar los bits. La forma por descomposición consiste en agrupar los bits similares y solo escribir el valor de los bits similares. En caso de que no sean similares todos los bits en un mapa de bits dado, se procede a dividir en cuatro secciones, imprimir la letra D y procesar cada uno de los cuartos de la misma manera, tal como se lee en la descripción del problema.&lt;/p></description></item><item><title>Solución a "Pista"</title><link>https://blog.omegaup.com/445/</link><pubDate>Sun, 06 Oct 2013 22:48:35 +0000</pubDate><guid>https://blog.omegaup.com/445/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2014E1P14#problems/pista">Preselectivo para la IOI 2014, Etapa 1, Problemset 14&lt;/a> &lt;strong>Autor:&lt;/strong> Miguel Covarrubias &lt;strong>Fuente&lt;/strong>: Codeforces&lt;/p>
&lt;p>Este problema es una ligera modificación del Let&amp;rsquo;s Play Osu! que apareció en la ronda 146 en Codeforces. &lt;a href="http://codeforces.ru/blog/entry/5592">La solución explicada la pueden encontrar en el editorial.&lt;/a>&lt;/p>
&lt;p>Para $latex N \le 10$ se pueden checar todas las $latex 2^N$ configuraciones de pistas. Para $latex N \le 1000$ funciona una dinámica $latex O(N^2)$, donde los estados son (posición, altura/profundidad que se lleva hasta el momento).&lt;/p></description></item><item><title>Solución a "Cueva"</title><link>https://blog.omegaup.com/solucion-a-cueva/</link><pubDate>Mon, 14 Jan 2013 16:27:54 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-cueva/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2013E1P4">Preselectivo para la IOI 2013, Etapa 1, Examen 4&lt;/a> &lt;strong>Autor:&lt;/strong> &lt;a href="http://twitter.com/erosethan">Ethan Jiménez Vargas&lt;/a>&lt;/p>
&lt;p>Después de comprender el problema podemos deducir dos cosas:&lt;/p>
&lt;ul>
&lt;li>Los &lt;strong>N&lt;/strong> puntos de la cueva modelan un árbol, esto debido a la propiedad de que existirán &lt;strong>N-1&lt;/strong> aristas y siempre hay un camino entre cualquier par de nodos.&lt;/li>
&lt;li>Podemos traducir la tarea principal del problema a lo siguiente “Para cada una de las &lt;strong>Q&lt;/strong> preguntas, ¿el nodo A es un ancestro del nodo &lt;strong>B&lt;/strong>?”, de modo que necesitamos encontrar una manera óptima de saberlo.&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>Subtarea 1&lt;/strong>&lt;/em>. Para obtener los primeros 25 puntos del problema solo necesitamos implementar el método de fuerza bruta que nos permita conocer si &lt;strong>A&lt;/strong> es ancestro de &lt;strong>B&lt;/strong>, esto puede conseguirse con una búsqueda en profundidad (DFS) que desde el nodo &lt;strong>A&lt;/strong> encuentre la manera de llegar al nodo 1, restringiendo que no sea posible pasar por el nodo &lt;strong>B&lt;/strong>, si existe un camino del nodo &lt;strong>A&lt;/strong> al nodo raíz la respuesta es 1, en caso contrario la respuesta es 0. Hay que cuidar los casos especiales cuando el nodo B es el nodo raíz o cuando el nodo &lt;strong>A&lt;/strong> es el mismo nodo &lt;strong>B&lt;/strong>, en ambos casos la respuesta es 0.&lt;/p></description></item><item><title>Solución a "Chilly Rapero"</title><link>https://blog.omegaup.com/solucion-a-chilly-rapero/</link><pubDate>Sat, 12 Jan 2013 19:41:11 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-chilly-rapero/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2013E1P12">Preselectivo para la IOI 2013, Etapa 1, Examen 12&lt;/a> &lt;strong>Autor:&lt;/strong> &lt;a href="http://twitter.com/erosethan">Ethan Jiménez Vargas&lt;/a>&lt;/p>
&lt;p>La clave para resolver este problema es interpretar las palabras como nodos y los cambios entre palabras como aristas, de manera que podamos verlo todo como un grafo no dirigido. Asignamos a cada palabra un nodo y creamos las aristas entre nodos verificando alguna de las condiciones que se proponen en el enunciado del problema: si una palabra A es un prefijo o sufijo de la palabra B o la palabra A difiere con la palabra B por un solo caracter, establecemos una arista entre los nodos A y B.&lt;/p></description></item><item><title>Solución a "Cambio"</title><link>https://blog.omegaup.com/solucion-a-cambio/</link><pubDate>Tue, 08 Jan 2013 17:18:25 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-cambio/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2013E1P7">Preselectivo para la IOI 2013, Etapa 1, Examen 7&lt;/a> **Autor: **&lt;a href="mailto:elira@elira.me">Enrique Lira Vargas&lt;/a>&lt;/p>
&lt;p>Lo importante de este problema es notar como se puede usar un backtracking para contar cosas. En este caso lo que se debía contar era la cantidad de formas de llegar a una cantidad sumando una o más veces una serie de cantidades dadas.&lt;/p>
&lt;h2 id="solución-de-30-50-puntos">Solución de 30, 50 puntos&lt;/h2>
&lt;p>Generar todas las combinaciones que sumen la cantidad C pedida. Para hacer esto se puede hacer con una búsqueda en profundidad de manera ordenada de la misma forma que se calculan permutaciones pero cuidando que la suma no sobrepase el valor C deseado. Esto se puede considerar una búsqueda podada.&lt;/p></description></item><item><title>Solución a "Minecraft"</title><link>https://blog.omegaup.com/solucion-a-minecraft/</link><pubDate>Tue, 08 Jan 2013 17:14:15 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-minecraft/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2013E1P5">Preselectivo para la IOI 2013, Etapa 1, Examen 5&lt;/a> **Autor: **&lt;a href="mailto:elira@elira.me">Enrique Lira Vargas&lt;/a>&lt;/p>
&lt;p>Este problema no requiere ninguna observación específica y realmente lo único que hay que hacer es una búsqueda.&lt;/p>
&lt;h2 id="para-los-primeros-50-puntos">Para los primeros 50 puntos&lt;/h2>
&lt;p>Este primer sub set de casos se puede resolver implementando una búsqueda en amplitud que nos dé el camino más corto entre dos puntos en un mapa con paredes.&lt;/p>
&lt;h2 id="para-los-75-puntos">Para los 75 puntos&lt;/h2>
&lt;p>Para este punto se me ocurrió una solución factible para aquellos que no saben construir una cola de prioridad, correr una búsqueda en amplitud con dos colas cuidando elegir siempre la siguiente posición con una menor cantidad de movimientos de las dos colas.&lt;/p></description></item><item><title>Solución a "K-Arbol"</title><link>https://blog.omegaup.com/solucion-a-k-arbol/</link><pubDate>Mon, 07 Jan 2013 17:37:40 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-k-arbol/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2013E1P5">Preselectivo para la IOI 2013, Etapa 1, Examen 5&lt;/a> **Autor: **&lt;a href="mailto:lkt345@gmail.com">Saul de Nova Caballero&lt;/a>&lt;/p>
&lt;p>En pocas palabras el problema es, dado un árbol que se puede colorear, encuentra la menor solución satisfaciendo las restricciones dadas sobre los colores. Este problema es un caso particular de Graph Coloring(en español coloración de grafos), en donde el grafo es un árbol.&lt;/p>
&lt;h1 id="subcaso-110-puntos">Subcaso 1(10 puntos)&lt;/h1>
&lt;p>Para el primer subcaso era posible hacer una búsqueda en profunidad sobre todos los nodos, encontrando la menor solución. Para guardar el árbol, era posible utilizar una matriz que guardara todos los colores posibles y entonces ver si era posible una solución con el menor color posible. La solución de este caso era trivial si se usaba una búsqueda exhaustiva.&lt;/p></description></item><item><title>Solución a "Metro"</title><link>https://blog.omegaup.com/solucion-a-metro/</link><pubDate>Mon, 07 Jan 2013 17:22:45 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-metro/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2013E1P12">Preselectivo para la IOI 2013, Etapa 1, Examen 12&lt;/a> **Autor: **&lt;a href="mailto:alainacme@gmail.com">Alain Acevedo Mejía&lt;/a>&lt;/p>
&lt;p>El problema en cuestión se reduce a encontrar un árbol de expansión mínima. La solución es una aplicación directa de alguno de los algoritmos existentes para ello (bien implementada), por lo que hablaré brevemente sobre una de las posibilidades y daré referencias donde puedan encontrar información más detallada.&lt;/p>
&lt;p>Para encontrar el costo mínimo de unir todas las estaciones debemos encontrar el árbol de expansión mínima de la gráfica en cuestión (es decir, una subgráfica conexa que una todos los vértices de la gráfica original y cuyo peso (la suma de los costos de todas sus aristas) sea el mínimo posible (siempre es un árbol)). Para ello una opción es usar el algoritmo de Kruskal: Ordenamos las aristas por su peso y vamos agregando cada arista de peso mínimo que no cree un ciclo en la gráfica. Hacemos esto hasta haber conectado todos los vértices de nuestra gráfica. Por la cantidad de aristas que tenemos requerimos ordenar eficientemente y verificar si las aristas forman un ciclo o no eficientemente en cada paso, de lo contrario el programa no correrá en tiempo.&lt;/p></description></item><item><title>Solución a "Pulseras"</title><link>https://blog.omegaup.com/162/</link><pubDate>Mon, 07 Jan 2013 16:58:46 +0000</pubDate><guid>https://blog.omegaup.com/162/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2013E1P10">Preselectivo para la IOI 2013, Etapa 1, Examen 10&lt;/a> **Autor: **&lt;a href="mailto:alainacme@gmail.com">Alain Acevedo Mejía&lt;/a>&lt;/p>
&lt;p>Considero este problema como un buen ejemplo para quienes desean comenzar a trabajar con problemas de programación dinámica. Se nos pide calcular la cantidad de pulseras diferentes que se pueden construir bajo ciertas condiciones. Podemos comenzar preguntándonos, ¿qué sucede si la primera cuenta es negra? La siguiente podrá ser sólo blanca. Y si comenzamos con una blanca, la siguiente puede ser negra o blanca. Podemos entonces en una matriz de 2xn colocar en cada columna cuántas secuencias distintas hay que en la posición i-ésima terminen en negro y cuántas en blanco de tal modo que no haya dos cuentas negras consecutivas. Simplemente, para obtener los números de la siguiente posición, observamos que el número de las que terminan en blanco es la suma de ambos números de la posición anterior y de las que terminan en negro es el número de secuencias que terminan en blanco de la posición anterior.&lt;/p></description></item><item><title>Solución a "Los Bloques de Link"</title><link>https://blog.omegaup.com/solucion-a-los-bloques-de-link/</link><pubDate>Mon, 07 Jan 2013 16:54:06 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-los-bloques-de-link/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2013E1P8">Preselectivo para la IOI 2013, Etapa 1, Examen 8&lt;/a> **Autor: **&lt;a href="mailto:alainacme@gmail.com">Alain Acevedo Mejía&lt;/a>&lt;/p>
&lt;p>Es claro que no es posible probar todas las sucesiones posibles de movimientos de los bloques para encontrar la solución (a excepción de casos muy simples). El número de tales sucesiones puede ser infinito en caso de que se puedan formar ciclos de movimientos (lo cual sucede en muchos de lo casos de prueba), y aún en casos donde el número sea finito puede suceder que no se tenga tiempo para probarlos todos.&lt;/p></description></item><item><title>Solución a "Problema"</title><link>https://blog.omegaup.com/solucion-a-problema/</link><pubDate>Mon, 07 Jan 2013 16:34:20 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-problema/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2013E1P10">Preselectivo para la IOI 2013, Etapa 1, Examen 10&lt;/a> **Autor: **&lt;a href="mailto:hugochiquito.cpp@gmail.com">Hugo Dueñas&lt;/a>&lt;/p>
&lt;p>Primero, dado una secuencia $latex A$ denotaremos por $latex s(A)$ a la suma de los elementos de A. Entonces podemos replantear el problema como: Dada una secuencia $latex S$ debemos de econtrar una subsecuencia $latex A$ de $latex S$ tal que $latex s(A) - (s(S) - s(A))$ sea la minima posible.&lt;/p>
&lt;p>Ahora, como $latex s(A) - (s(S) - s(A)) = 2 \times s(A) - s(S)$, entonces tenemos que minimizar $latex 2 \times s(A) - s(S)$ que es lo mismo que minimizar $latex s(A) - s(S)/2$. O sea, debemos de encontrar una subsecuencia $latex A$ cuya suma esté lo más cercana a la mitad de la suma de $latex S$, en particular podemos restringir nuestra búsqueda a las subsecuencias cuya suma sea menor o igual a $latex s(S)/2$.&lt;/p></description></item><item><title>Solución a "Alfiles"</title><link>https://blog.omegaup.com/solucion-a-alfiles/</link><pubDate>Mon, 07 Jan 2013 16:23:49 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-alfiles/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2013E1P7">Preselectivo para la IOI 2013, Etapa 1, Examen 7&lt;/a> **Autor: **&lt;a href="mailto:hugochiquito.cpp@gmail.com">Hugo Dueñas&lt;/a>&lt;/p>
&lt;p>Lo primero que se debe de notar es que en cada una de las $latex 2n-1$ diagonales principales, las cuales mostradas en la imagen de abajo, habrá máximo 1 alfil. Lo mismo se cumple para las diagonales invertidas, mostradas también en una imagen abajo.&lt;/p>
&lt;p>&lt;img src="https://blog.omegaup.com/images/pic1.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://blog.omegaup.com/images/pic2.png" alt="">&lt;/p>
&lt;p>Ahora, cada diagonal principal se cruza con ciertas diagonales invertidas. Entonces se plantea una solución de tipo &lt;em>Backtracking&lt;/em> que corre sobre las diagonales principales marcando diagonales invertidas a cada paso (representando que se ha colocado un alfil en el cruce de esas dos diagonales).&lt;/p></description></item><item><title>Solución a "Mario Reloaded"</title><link>https://blog.omegaup.com/solucion-a-mario-reloaded/</link><pubDate>Mon, 07 Jan 2013 16:08:32 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-mario-reloaded/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2013E1P8">Preselectivo para la IOI 2013, Etapa 1, Examen 8&lt;/a> **Autor: **&lt;a href="mailto:paspartu@gmail.com">Pavel Herrera Dominguez&lt;/a>)&lt;/p>
&lt;h2 id="observaciones">Observaciones&lt;/h2>
&lt;p>Lo primero es ver como se modelan los estados del problema sin pensar en que Mario puede tomar los atajos, únicamente pensar en las llaves, claramente existen $latex n\times2^m$ estados, pues no importa el orden en que se toman las llaves solo las llaves que se tienen al llegar a cada puerta. A partir de aquí nos referiremos como estado a la puerta y las llaves que trae Mario.&lt;/p></description></item><item><title>Solución a "El collar de perlas"</title><link>https://blog.omegaup.com/solucion-a-el-collar-de-perlas/</link><pubDate>Thu, 03 Jan 2013 16:01:37 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-el-collar-de-perlas/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2013E1P10">Preselectivo para la IOI 2013, Etapa 1, Examen 10&lt;/a>**&lt;a href="https://omegaup.com/arena/IOI2013E1P10"> &lt;/a> Autor: **&lt;a href="http://goldendarknut.blogspot.mx/">Félix Rafael Horta Cuadrilla&lt;/a>&lt;/p>
&lt;p>En una bosque habitan dos clanes de enanos: los enanos rojos y los enanos verdes. Durante sus expediciones en las cuevas cercanas, un grupo de enanos rojos y verdes encontraron un collar formado por perlas blancas y negras que no tienen ningun valor, pero al final del collar hay un valioso diamante. Los dos clanes de enanos quieren apoderarse del diamante.&lt;/p>
&lt;p>Para resolver el problema de manera pacifica deciden jugar el siguiente juego: a cada uno de los N enanos se le asigna un numero del 1 al N (un numero diferente para cada enano) y dos listas de numeros, una negra y una blanca (las listas pueden ser diferentes entre si). Cada lista contiene una cantidad diferente de numeros, cada numero &lt;em>i&lt;/em> en cualquier lista representa al enano &lt;em>i&lt;/em>.&lt;/p>
&lt;p>Durante el juego, el collar se pasa de un enano a otro de acuerdo con las siguientes reglas: cuando un enano recibe el collar, el quita la primer perla en el collar y si la perla es blanca, entonces pasa lo que quedo del collar a cualquier enano que este en su lista blanca (al que el quiera), pero si la piedra es negra, entonces pasa lo que quedo del collar a algun enano de su lista negra. Para empezar el juego, el collar se le da a un enano aleatoriamente.&lt;/p>
&lt;p>En algun momento el collar solamente va a tener el diamante, el enano que recibe el collar en este estado gana el diamante para su clan y el juego termina.&lt;/p></description></item><item><title>Solución a "Teclado Roto"</title><link>https://blog.omegaup.com/solucion-a-teclado-roto/</link><pubDate>Sun, 28 Oct 2012 01:31:45 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-teclado-roto/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2013E1P2">Preselectivo para la IOI 2013, Etapa 1, Examen 2&lt;/a>**&lt;a href="https://omegaup.com/arena/IOI2013E1P2"> &lt;/a> Autor: **&lt;a href="#">Jorge Alberto González Martínez&lt;/a>&lt;/p>
&lt;p>Los temas para el examen donde apareció este problema eran pilas, colas y búsqueda binaria. Después de haber estudiado los temas, es buena idea combinar la teoría aprendida.&lt;/p>
&lt;p>El problema del teclado roto describe una serie de operaciones en las que es necesaria una estructura en la que sea posible agregar elementos por ambos lados (izquierda y derecha). La descripción del problema muestra las restricciones, que no superan los 100, 000 elementos, por lo que es posible hacer un arreglo estático de caracteres de ese tamaño.&lt;/p></description></item><item><title>Solución a "El Artista Lento"</title><link>https://blog.omegaup.com/solucion-a-el-artista-lento/</link><pubDate>Fri, 19 Oct 2012 17:09:21 +0000</pubDate><guid>https://blog.omegaup.com/solucion-a-el-artista-lento/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2013E1P2">Preselectivo para la IOI 2013, Etapa 1, Examen 2&lt;/a>**&lt;a href="https://omegaup.com/arena/IOI2013E1P2"> &lt;/a> Autor: **&lt;a href="#">Christian Hernández&lt;/a>&lt;/p>
&lt;p>Lo primero de lo que debemos darnos cuenta es de que como los pedazos son de dimensiones enteras y se colocan en dimensiones enteras, podemos &amp;ldquo;pensar&amp;rdquo; el problema de manera que en lugar de pegar rectángulos de &lt;strong>Mi&lt;/strong> x &lt;strong>Ni&lt;/strong>, estamos pegando &lt;strong>Mi&lt;/strong> x &lt;strong>Ni&lt;/strong> de 1 x 1 (Ejemplo: Si tuvieramos que pegar un rectángulo de 4 x 3, podemos pensarlo como pegar 12 rectangulos de 1 x 1). Podemos pensar lo mismo de los rectángulos adhesivos.&lt;/p></description></item><item><title>Solución a "Engranes"</title><link>https://blog.omegaup.com/engranes-khayyam-solucion-enrique-lira/</link><pubDate>Sat, 13 Oct 2012 04:06:46 +0000</pubDate><guid>https://blog.omegaup.com/engranes-khayyam-solucion-enrique-lira/</guid><description>&lt;p>&lt;strong>Concurso:&lt;/strong> &lt;a href="https://omegaup.com/arena/IOI2013E1P1">Preselectivo para la IOI 2013, Etapa 1, Examen 1&lt;/a>**&lt;a href="https://omegaup.com/arena/IOI2013E1P1"> &lt;/a> Autor: **&lt;a href="http://www.linkedin.com/pub/jesus-omar-ocegueda-gonzalez/18/b45/5b9">Omar Ocegueda (Khayyam)&lt;/a> **Solución por: **&lt;a href="http://elira.me/">Enrique Lira&lt;/a>&lt;/p>
&lt;p>Para poder resolver este problema hay que ver ciertas propiedades a las cuales podemos llegar fácilmente a partir de ejemplos. Una primera duda que nos surge es: ¿Vuelve al estado inicial?, si hacemos un par de ejemplos podemos ver que si, otra duda que nos surge es: ¿Cuándo vuelve al estado inicial?, y aquí comienza lo complicado. Para saber cuando vuelve a su estado inicial hay que notar ciertas cosas, una de ellas es que en cuanto el diente 1 vuelve a tocar al valle 1 hemos vuelto al estado inicial, no hay forma de que el diente 0 toque al valle 0 sin haber vuelto al estado inicial, entonces hay que buscar ese instante.&lt;/p></description></item><item><title>Solución a "Juego Lento"</title><link>https://blog.omegaup.com/juego-lento-ethan-jimenez/</link><pubDate>Fri, 12 Oct 2012 21:43:58 +0000</pubDate><guid>https://blog.omegaup.com/juego-lento-ethan-jimenez/</guid><description>&lt;p>&lt;strong>Concurso:&lt;a href="https://omegaup.com/arena/IOI2013E1P1"> &lt;/a>&lt;/strong>&lt;a href="https://omegaup.com/arena/IOI2013E1P1">Preselectivo para la IOI 2013, Etapa 1, Examen 1&lt;/a>&lt;br>
&lt;strong>Autor:&lt;/strong> &lt;a href="http://www.codechef.com/users/ethanjimenez">Ethan Jimenez&lt;/a>&lt;/p>
&lt;p>Empecemos analizando el caso en que solo jugamos con un montón de fichas, dada la restricción de tomar únicamente una sola ficha el juego se vuelve predecible ya que no hay más opción que tomar una ficha de ese montón. Si el montón tiene una sola ficha el jugador con el primer turno pierde, si hay dos fichas el jugador con el primer turno gana, si hay tres fichas el jugador con el primer turno pierde, y así alternadamente, podemos entonces deducir que si hay un número impar de fichas en el montón, el jugador con el primer turno perderá, por el otro lado, si el montón tiene un número par de fichas ganará la partida.&lt;/p></description></item></channel></rss>