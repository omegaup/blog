<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>omegaUp blog – Study Material</title><link>https://blog.omegaup.com/tags/study-material/</link><description>Recent content in Study Material on omegaUp blog</description><generator>Hugo -- gohugo.io</generator><language>es-MX</language><lastBuildDate>Sun, 05 Dec 2021 05:03:04 +0000</lastBuildDate><atom:link href="https://blog.omegaup.com/tags/study-material/index.xml" rel="self" type="application/rss+xml"/><item><title>Resolviendo problemas con un límite bajo de memoria</title><link>https://blog.omegaup.com/posts/resolviendo-problemas-con-un-limite-bajo-de-memoria/</link><pubDate>Sun, 05 Dec 2021 05:03:04 +0000</pubDate><guid>https://blog.omegaup.com/posts/resolviendo-problemas-con-un-limite-bajo-de-memoria/</guid><description>
&lt;p>Gracias @Rodrigo-RCC por este aporte!&lt;/p>
&lt;p>El límite de memoria de un problema puede cambiar drásticamente la forma en la que podemos resolverlo. Por ejemplo, el problema &lt;a href="https://omegaup.com/arena/problem/La-especie-dominante-en-marte" target="_blank" rel="noopener">https://omegaup.com/arena/problem/La-especie-dominante-en-marte&lt;/a> nos pide encontrar el número que más se repite en una secuencia, si además sabemos que ese número aparece al menos más de la mitad de las veces. Si estamos usando C++ y conocemos relativamente bien la biblioteca estándar del lenguaje, nuestro primer intento sería algo así:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;map&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>( ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>map&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> frecuencias;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> n; std&lt;span style="color:#f92672">::&lt;/span>cin &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> n;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> frecuencias&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>[n&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// revisar qué valor apareció más e imprimirlo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Si enviamos el código anterior, nos llevaremos la desagradable sorpresa de obtener &lt;span style="color:#960050;background-color:#1e0010">\`&lt;/span>MLE&lt;span style="color:#960050;background-color:#1e0010">\`&lt;/span> (memoria límite excedida). Aunque esta publicación no tiene por objetivo explicar cómo se resuelve el problema, sí podemos mencionar que lo adecuado es un &lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">*&lt;/span>algoritmo de streaming&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">*&lt;/span> que surgió en el &lt;span style="color:#960050;background-color:#1e0010">á&lt;/span>rea de lo que ahora se conoce como &lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">*&lt;/span>Big Data&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">*&lt;/span>. Entonces, el límite bajo de memoria es un intento de obligar al usuario a deducir dicho algoritmo, el cual usa &lt;span style="color:#960050;background-color:#1e0010">ú&lt;/span>nicamente tres variables enteras. Desafortunadamente, incluso el siguiente código...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">```&lt;/span>cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> main( ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// leer la entrada y no hacer nada con ella
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// no nos sabemos el algoritmo y tenemos poca memoria :(
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> n; std&lt;span style="color:#f92672">::&lt;/span>cin &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> n;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">¡&lt;/span>También supera la memoria límite del problema&lt;span style="color:#f92672">!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Un usuario podría pensar (equivocadamente) que entonces el problema es imposible de resolver. Para evitar esta confusión, los usuarios de la plataforma deben tomar en cuenta lo siguiente:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span> Existe un &lt;span style="color:#960050;background-color:#1e0010">ú&lt;/span>nico límite de memoria por problema, el cual es independiente del lenguaje de programación usado. En el problema descrito previamente, el autor no quiso aumentar artificialmente el límite de memoria sólo para aceptar envíos en todos los lenguajes, porque eso implicaría que alguien que use un lenguaje eficiente podría idear un algoritmo que no era el que el autor quería permitir. Entonces, es verdad que algunos problemas no se pueden resolver en ciertos lenguajes de programación, pero el autor debería garantizar que el problema se puede resolver de forma razonable en por lo menos un lenguaje de programación (de preferencia C y C&lt;span style="color:#f92672">++&lt;/span>).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">-&lt;/span> La biblioteca &lt;span style="color:#960050;background-color:#1e0010">\`&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>iostream&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\`&lt;/span> de C&lt;span style="color:#f92672">++&lt;/span> consume mucha más memoria de la que uno podría imaginar inicialmente. Esto se puede verificar resolviendo un problema de &lt;span style="color:#e6db74">&amp;#34;Hola Mundo&amp;#34;&lt;/span> usando &lt;span style="color:#960050;background-color:#1e0010">\`&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>iostream&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\`&lt;/span> y luego comparándolo con uno que sólo usa &lt;span style="color:#960050;background-color:#1e0010">\`&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>stdio.h&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\`&lt;/span>. Peor aún, basta incluir &lt;span style="color:#960050;background-color:#1e0010">\`&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>iostream&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\`&lt;/span> para que el consumo de memoria del programa aumente, ya que la inclusión de ese archivo al menos provoca que los objetos globales &lt;span style="color:#960050;background-color:#1e0010">\`&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>cin&lt;span style="color:#960050;background-color:#1e0010">\`&lt;/span> y &lt;span style="color:#960050;background-color:#1e0010">\`&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>cout&lt;span style="color:#960050;background-color:#1e0010">\`&lt;/span> se inicialicen.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>El siguiente código no calcula la respuesta correcta, pero al menos al menos no superará el límite de memoria :)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">```&lt;/span>cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> main( ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// leer la entrada y no hacer nada con ella
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// no nos sabemos el algoritmo :(
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> n; scanf(&lt;span style="color:#e6db74">&amp;#34;%d&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>n) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Esperamos que esta publicación les haya ayudado a tener una idea más cercana de cómo atacar cierto tipo de problemas inusuales y los invitamos a resolver el problema mencionado en el juez en línea.&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div></description></item><item><title>Cómo contribuir: correr y editar omegaUp en tu máquina local</title><link>https://blog.omegaup.com/posts/como-contribuir-correr-y-editar-omegaup-en-tu-maquina-local/</link><pubDate>Tue, 08 Jul 2014 15:19:19 +0000</pubDate><guid>https://blog.omegaup.com/posts/como-contribuir-correr-y-editar-omegaup-en-tu-maquina-local/</guid><description>
&lt;p>omegaUp es un proyecto open source. Todo el código que se usa para correr el sitio se encuentra en &lt;a href="https://github.com/omegaup/omegaup" target="_blank" rel="noopener">github&lt;/a>. Inclusive pueden ver los últimos cambios &lt;a href="https://github.com/omegaup/omegaup/commits/master" target="_blank" rel="noopener">aquí&lt;/a>. En este post vamos a hablar de cómo configurar tu máquina para correr localmente omegaUp y poder contribuir.&lt;/p>
&lt;p>**Instrucciones de instalación de omegaUp: **&lt;a href="https://github.com/omegaup/omegaup/wiki/C%C3%B3mo-empezar-a-desarrollar" target="_blank" rel="noopener">https://github.com/omegaup/omegaup/wiki/C%C3%B3mo-empezar-a-desarrollar&lt;/a>&lt;/p>
&lt;p>En omegaUp usamos github para administrar todo el código que corre el sitio. En caso de que no estés familiarizado con git, &lt;a href="https://help.github.com/articles/set-up-git" target="_blank" rel="noopener">la  ayuda de github&lt;/a> y el &lt;a href="http://git-scm.com/book/en/Getting-Started-Git-Basics" target="_blank" rel="noopener">git book&lt;/a> son excelentes lugares para empezar.&lt;/p>
&lt;p>Las instrucciones básicas para hacer funcionar todo el código de omegaUp localmente se encuentran en el &lt;a href="https://github.com/omegaup/omegaup/wiki/C%C3%B3mo-empezar-a-desarrollar" target="_blank" rel="noopener">Wiki&lt;/a> de nuestro repo.&lt;/p>
&lt;p>Para facilitar la instalación de todas las librerías, aplicaciones y servicios requeridos para hacer funcionar omegaUp usamos una máquina virtual. &lt;a href="http://www.vagrantup.com/" target="_blank" rel="noopener">Vagrant&lt;/a> nos ayuda a configurar la máquina virtual de forma simple. Literalmente esto es equivalente a instalar omegaUp con un sólo comando y tiene la ventaja de que, al ser todo instalado sobre la máquina virtual, no interfiere con la configuración de tu computadora.&lt;/p>
&lt;p>Happy coding!&lt;/p></description></item><item><title>Trucos para ser más cool</title><link>https://blog.omegaup.com/posts/trucos-cool/</link><pubDate>Mon, 07 Jul 2014 05:37:40 +0000</pubDate><guid>https://blog.omegaup.com/posts/trucos-cool/</guid><description>
&lt;p>Después de un rato de investigación y experimentación, por fin me tomo el tiempo para escribir este post y presentarles algunos trucos que, considero, podrían ayudarles a simplificarse la vida cuando programen y, obviamente, a ser mucho más cool.&lt;/p>
&lt;p>&lt;strong>&lt;em>¿Cansado de importar librerías como asíatico en TopCoder? ¡Aquí está la solución!&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Muchas veces es nefasto encontrar varios (sino es que miles) errores al compilar a causa de librerías que hemos olvidado incluir. Existe una librería que, al incluirla, agrega todas las librerías estándar de C++ a nuestro código, ¡incluso las de la STL!&lt;/p>
&lt;p>&lt;em>¿Que clase de brujería es esta?&lt;/em> Seguramente se estarán preguntando. Muy sencillo, solo necesitan escribir la siguiente línea de codigo: &lt;code>#include &amp;lt;bits/stdc++.h&amp;gt;&lt;/code>&lt;/p>
&lt;p>_(Actualización) _Gracias a el comentario de lhchavez por remarcar el hecho de que esta línea funciona únicamente con el compilador &lt;em>gcc&lt;/em>. Pese a esto, gran parte de los evaluadores actualmente usan &lt;em>gcc,&lt;/em> por lo que podemos confiar en su uso, al menos en omegaUp. En caso de que la librería anterior no siga siendo soportada por omegaUp, les informaremos oportunamente.&lt;/p>
&lt;p>&lt;em>&lt;strong>¡Mi mami dice que cin/cout es malo y no debo juntarme con ellos!&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Si no me equivoco, durante mucho tiempo se ha tratado a scanf y printf como el pan de cada día para la entrada y salida en los concursos de programación, al menos en México. Mientras tanto, se satanizó a cin y cout por ser lentos (o especiales, como dice mi mami) para realizar entrada y salida eficiente.&lt;/p>
&lt;p>Sin embargo esto siempre fue un mito, los métodos cin/cout son incluso más eficientes que scanf/printf, solo había que descubrir el por que no lo notamos.&lt;/p>
&lt;p>Resulta que cin/cout son muy buenos amigos de scanf/printf. Como son tan buenos amigos, al realizar la lectura y salida no querían alejarse demasiado, por lo que cin/cout tenía que sincronizarse para estar siempre a la par de scanf/printf.&lt;/p>
&lt;p>Para no hacer el cuento largo, hay una forma de desactivar la opción de sincronización entre cin/cout y scanf/printf, solo es necesario incluir al inicio del main:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>std&lt;span style="color:#f92672">::&lt;/span>cin.tie(&lt;span style="color:#66d9ef">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>std&lt;span style="color:#f92672">::&lt;/span>ios_base&lt;span style="color:#f92672">::&lt;/span>sync_with_stdio(false);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Con esto podemos usar cin y cout sin temor a obtener TLE por lectura lenta, ¡Yaaay!&lt;/p>
&lt;p>&lt;em>&lt;strong>¿Y eso es todo? ¿Ya puedo disfrutar de cin y cout?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Casi. Antes de cantar victoria hay un último detalle para evitar los TLE. Gracias a un último experimento, encontramos que cuando se presentaban outputs muy grandes, cin/cout optimizado seguía lanzando TLE cuando scanf/printf no.&lt;/p>
&lt;p>¡Tranquilos! También es posible evitar este error. El problema se presentaba porque comúnmente usaríamos lo siguiente: &lt;code>cout &amp;lt;&amp;lt; numero &amp;lt;&amp;lt; endl&lt;/code>. Sucede que &lt;em>endl&lt;/em>, además de imprimir un salto de línea, hace &lt;em>flush&lt;/em> en el flujo de salida, lo cual es considerablemente costoso al imprimir muchas líneas y entorpece el rendimiento.&lt;/p>
&lt;p>Para que la salida sea eficiente, recomendamos que uses el salto de línea literal &lt;code>&amp;quot;\n&amp;quot;&lt;/code>.&lt;/p>
&lt;p>Con los dos trucos anteriores, la eficiencia de cin/cout mejora generalmente un &lt;em>&lt;strong>5-10%&lt;/strong>&lt;/em> los resultados obtenidos por scanf/printf. Bastante cool, ¿no?&lt;/p>
&lt;p>Aunque el objetivo original no es ganar unas cuantas centésimas de segundo en eficiencia, sino dar la oportunidad a aquellos olímpicos que no manejan scanf/printf para seguir usando cin/cout sin enfrentarse a más complicaciones.&lt;/p>
&lt;p>Finalmente les dejó un ejemplo de cómo usar todo lo anterior en un código de C++. Espero que algo de esto les pueda ayudar en el futuro. Les deseo lo mejor :)&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define optimizar_io do { std::ios_base::sync_with_stdio(false); std::cin.tie(nullptr); } while(false)`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> optimizar_io;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> a, b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>cin &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> a &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> a &lt;span style="color:#f92672">+&lt;/span> b &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div></description></item><item><title>Summary of mathematical background for Computer Science</title><link>https://blog.omegaup.com/posts/summary-of-mathematical-background-for-computer-science/</link><pubDate>Thu, 29 May 2014 22:01:21 +0000</pubDate><guid>https://blog.omegaup.com/posts/summary-of-mathematical-background-for-computer-science/</guid><description>
&lt;p>Directamente del twitter feed de Computer Science (&lt;a href="https://twitter.com/CompSciFact" target="_blank" rel="noopener">@CompSciFact&lt;/a>) aquí hay una excelente recopilación de las matemáticas que son comunmente requeridas en ciencias computacionales:&lt;/p>
&lt;p>&lt;a href="http://www.jfsowa.com/logic/math.htm" target="_blank" rel="noopener">http://www.jfsowa.com/logic/math.htm&lt;/a>&lt;/p></description></item><item><title>Practicando para la OMI en omegaUp</title><link>https://blog.omegaup.com/posts/practicando-para-la-omi-en-omegaup/</link><pubDate>Mon, 17 Mar 2014 14:02:16 +0000</pubDate><guid>https://blog.omegaup.com/posts/practicando-para-la-omi-en-omegaup/</guid><description>
&lt;p>Si estás practicando para la Olimpiada Mexicana de Informática 2014, omegaUp tiene disponibles los exámenes nacionales desde el 2009 para que intentes resolverlos. Aquí están los enlaces a los concursos de práctica&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://omegaup.com/arena/OMI2009D1/practice/" target="_blank" rel="noopener">OMI 2009, día 1 (Karel)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://omegaup.com/arena/OMI2009D2/practice/" target="_blank" rel="noopener">OMI 2009, día 2 (Lenguaje)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://omegaup.com/arena/OMI2010D1/practice/" target="_blank" rel="noopener">OMI 2010, día 1 (Karel)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://omegaup.com/arena/OMI2010D2/practice/" target="_blank" rel="noopener">OMI 2010, día 2, (Lenguaje)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://omegaup.com/arena/OMI2011D1/practice/" target="_blank" rel="noopener">OMI 2011, día 1 (Karel)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://omegaup.com/arena/OMI2011D2/practice/" target="_blank" rel="noopener">OMI 2011, día 2 (Lenguaje)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://omegaup.com/arena/OMI2012DIA1/practice/" target="_blank" rel="noopener">OMI 2012, día 1 (Karel)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://omegaup.com/arena/OMI2012DIA2/practice/" target="_blank" rel="noopener">OMI 2012, día 2 (Lenguaje)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://omegaup.com/arena/OMI2013DIA1/practice/" target="_blank" rel="noopener">OMI 2013, día 1 (Karel)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://omegaup.com/arena/OMI2013DIA2/practice/" target="_blank" rel="noopener">OMI 2013, día 2 (Lenguaje)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Nuevamente agradecemos a Kuko Lopez de la &lt;a href="http://www.cimat.mx/oieg/orig/2013/" target="_blank" rel="noopener">OIEG&lt;/a> por ayudarnos a subir los problemas del 2009 al 2011.&lt;/p>
&lt;p>Que se diviertan!&lt;/p></description></item><item><title>Introducción a Omegaup, parte 2 - Problemas básicos</title><link>https://blog.omegaup.com/posts/introduccion-a-omegaup-parte-2-problemas-basicos/</link><pubDate>Tue, 08 Oct 2013 14:48:09 +0000</pubDate><guid>https://blog.omegaup.com/posts/introduccion-a-omegaup-parte-2-problemas-basicos/</guid><description>
&lt;p>Hola de nuevo. Continuando con la serie Introducción a Omegaup, esta vez vamos a hacer referencia a los problemas más sencillos de la plataforma a la fecha. &lt;a href="http://blog.omegaup.com/2013/09/introduccion-a-omegaup/#more-406" target="_blank" rel="noopener">Aquí se encuentra la parte 1&lt;/a> de esta serie.&lt;/p>
&lt;p>Para estos problemas, no se requiere conocer una técnica o un algoritmo en específico: simplemente requieren implementar (o simular) lo que se describe en el problema o hacer una o dos observaciones relativamente sencillas que permiten simplificar la implementación o acortar el número de operaciones que tu programa tendría que hacer y con ello poder resolver el problema dentro de los límites.&lt;/p>
&lt;p>&lt;strong>Material de estudio&lt;/strong>&lt;/p>
&lt;p>Antes de pasar a la lista de problemas, quiero empezar con las lecturas recomendadas para empezar a resolver problemas en omegaUp:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://omegaup.com/img/libropre3.pdf" target="_blank" rel="noopener">El Libro de Luis Vargas sobre Algoritmos.&lt;/a> Este es el libro que usamos para preparar a los preseleccionados de México para la Olimpiada Internacional de Informática. Su lectura completa es recomendada, sin embargo las secciones VII y II son fundamentales.&lt;/li>
&lt;li>Los temas 1, 2, 4 y 5 &lt;a href="http://pier.guillen.com.mx/" target="_blank" rel="noopener">del blog de Pier Paolo&lt;/a> sobre algoritmos.&lt;/li>
&lt;li>&lt;a href="http://community.topcoder.com/tc?module=Static&amp;amp;d1=tutorials&amp;amp;d2=importance_of_algorithms" target="_blank" rel="noopener">The Importance of Algorithms&lt;/a> (Topcoder Algorithm tutorials)&lt;/li>
&lt;li>&lt;a href="http://community.topcoder.com/tc?module=Static&amp;amp;d1=tutorials&amp;amp;d2=math_for_topcoders" target="_blank" rel="noopener">Mathematics for Topcoders&lt;/a> (Topcoder Algorithm tutorials)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Problemas directos&lt;/strong>&lt;/p>
&lt;p>Estos concursos fueron diseñados para familiarizarse con la programación competitiva en general. Son excelentes para empezar y su solución generalmente no requiere dominar una técnica en específico, más bien requieren saber usar las construcciones (ciclos, condiciones, etc&amp;hellip;) del lenguaje correctamente:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://omegaup.com/arena/CR41Taller/practice" target="_blank" rel="noopener">Código Rush 2013 (Taller)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://omegaup.com/arena/CR41/practice" target="_blank" rel="noopener">Código Rush Otoño 2013&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://omegaup.com/arena/CUPA2012warmup/practice" target="_blank" rel="noopener">CUPA 2012 Warmup&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Problemas no-tan-directos&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://omegaup.com/arena/problem/engranes" target="_blank" rel="noopener">Engranes &lt;/a>(&lt;a href="http://blog.omegaup.com/category/soluciones-preselectivo/etapa-1/examen-1/" target="_blank" rel="noopener">solución&lt;/a>)&lt;/li>
&lt;li>&lt;a href="https://omegaup.com/arena/problem/lento" target="_blank" rel="noopener">Lento&lt;/a> (&lt;a href="http://blog.omegaup.com/2012/10/juego-lento-ethan-jimenez/" target="_blank" rel="noopener">solución&lt;/a>)&lt;/li>
&lt;li>&lt;a href="https://omegaup.com/arena/problem/subprimos" target="_blank" rel="noopener">Subprimos&lt;/a> (&lt;a href="https://gist.github.com/joemmanuel/6885731" target="_blank" rel="noopener">solución&lt;/a> de &lt;a href="https://omegaup.com/profile/diego_futbolm" target="_blank" rel="noopener">diego_futbolm&lt;/a>)&lt;/li>
&lt;li>&lt;a href="https://omegaup.com/arena/problem/VenganzaDeSilvio" target="_blank" rel="noopener">La venganza de Silvio&lt;/a> (&lt;a href="http://blog.omegaup.com/2013/08/solucion-a-la-venganza-de-silvio/" target="_blank" rel="noopener">solución&lt;/a>)&lt;/li>
&lt;li>&lt;a href="https://omegaup.com/arena/problem/CartasDrLira" target="_blank" rel="noopener">Las cartas del Dr. Lira&lt;/a> (&lt;a href="http://blog.omegaup.com/2013/07/solucion-a-las-cartas-del-dr-lira/" target="_blank" rel="noopener">solución&lt;/a>)&lt;/li>
&lt;li>&lt;a href="https://omegaup.com/arena/problem/EltableroBety" target="_blank" rel="noopener">El tablero de Bety&lt;/a> (&lt;a href="https://gist.github.com/joemmanuel/6885843" target="_blank" rel="noopener">solución&lt;/a> de &lt;a href="https://omegaup.com/profile/spleensarethebest" target="_blank" rel="noopener">spleensarethebest&lt;/a>)&lt;/li>
&lt;li>&lt;a href="https://omegaup.com/arena/problem/triangulos" target="_blank" rel="noopener">Triángulos&lt;/a> (&lt;a href="http://community.topcoder.com/tc?module=Static&amp;amp;d1=hs&amp;amp;d2=match_editorials&amp;amp;d3=tchs07Rd1Gamma" target="_blank" rel="noopener">solución TriangleConstruction en Topcoder&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>Tienes más sugerencias de problemas o dudas sobre los existentes? Escríbelos en los comentarios.&lt;/p></description></item></channel></rss>